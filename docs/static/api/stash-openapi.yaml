definitions:
  entity.Aave:
    properties:
      pool:
        type: string
      poolAddressProvider:
        type: string
      priceOracle:
        type: string
    required:
    - pool
    - poolAddressProvider
    - priceOracle
    type: object
  entity.Amount:
    properties:
      amount:
        description: amount in lowest denomination
        example: ""
        type: string
      amountUSD:
        type: number
    required:
    - amount
    - amountUSD
    type: object
  entity.ChainID:
    enum:
    - 1
    - 42161
    - 10
    - 137
    - 8453
    - 43114
    - 100
    - 8333
    - 11155111
    - 1993
    - 19934
    - 84532
    type: integer
    x-enum-varnames:
    - Ethereum
    - Arbitrum
    - Optimism
    - Polygon
    - Base
    - Avalanche
    - Gnosis
    - B3
    - Sepolia
    - B3Sepolia
    - B4Sepolia
    - BaseSepolia
  entity.FungibleToken:
    properties:
      addresses:
        additionalProperties:
          type: string
        description: Maps chain id to token address on that chain
        example:
          "1": 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
        type: object
      decimals:
        type: integer
      logoURI:
        type: string
      name:
        type: string
      symbol:
        type: string
    required:
    - addresses
    - decimals
    - logoURI
    - name
    - symbol
    type: object
  entity.NativeToken:
    properties:
      decimals:
        type: integer
      name:
        type: string
    required:
    - decimals
    - name
    type: object
  entity.Network:
    properties:
      aave:
        $ref: '#/definitions/entity.Aave'
      aaveLiquidityPool:
        type: string
      blockTime:
        type: integer
      chainID:
        $ref: '#/definitions/entity.ChainID'
      chainType:
        type: string
      logoURI:
        type: string
      name:
        type: string
      nativeToken:
        $ref: '#/definitions/entity.NativeToken'
      rpcURLs:
        items:
          type: string
        type: array
      usdcLiquidityPool:
        type: string
    required:
    - aave
    - aaveLiquidityPool
    - blockTime
    - chainID
    - chainType
    - logoURI
    - name
    - nativeToken
    - rpcURLs
    - usdcLiquidityPool
    type: object
  entity.TokenTransferQuote:
    properties:
      amount:
        description: amount of tokens in lowest denomination
        example: ""
        type: string
      approvals:
        description: approvals that need to be executed before transaction
        items:
          $ref: '#/definitions/entity.Transaction'
        type: array
      destinationChain:
        $ref: '#/definitions/entity.ChainID'
      destinationTokenAddress:
        type: string
      duration:
        description: how long transfer will take in seconds
        type: number
      fee:
        $ref: '#/definitions/entity.Amount'
      gasCost:
        $ref: '#/definitions/entity.Amount'
      senderAddress:
        type: string
      sourceChain:
        $ref: '#/definitions/entity.ChainID'
      sourceTokenAddress:
        type: string
      tool:
        $ref: '#/definitions/entity.Tool'
      transaction:
        allOf:
        - $ref: '#/definitions/entity.Transaction'
        description: transaction request to be sent to the wallet
    required:
    - amount
    - approvals
    - destinationChain
    - destinationTokenAddress
    - duration
    - fee
    - gasCost
    - senderAddress
    - sourceChain
    - sourceTokenAddress
    - tool
    - transaction
    type: object
  entity.Tool:
    properties:
      logoURI:
        type: string
      name:
        type: string
    required:
    - logoURI
    - name
    type: object
  entity.Transaction:
    properties:
      chainId:
        $ref: '#/definitions/entity.ChainID'
      data:
        type: string
      from:
        type: string
      gasLimit:
        type: string
      to:
        type: string
      value:
        type: string
    required:
    - chainId
    - data
    - from
    - gasLimit
    - to
    - value
    type: object
  server.AccountFungibleBalanceHandler.response:
    properties:
      data:
        items:
          $ref: '#/definitions/server.chainBalance'
        type: array
    required:
    - data
    type: object
  server.AggregateBalanceSolutionHandler.response:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.TokenTransferQuote'
        type: array
    required:
    - data
    type: object
  server.AggregateWithHookSolutionHandler.request:
    properties:
      account:
        type: string
      amount:
        type: string
      destination:
        $ref: '#/definitions/entity.ChainID'
      destinationContractCall:
        properties:
          approvalAddress:
            type: string
          callData:
            type: string
          contractAddress:
            type: string
          gasLimit:
            type: integer
          outputTokenAddress:
            type: string
        required:
        - callData
        - contractAddress
        - gasLimit
        type: object
      threshold:
        type: string
      token:
        type: string
      type:
        enum:
        - fungible
        type: string
      whitelistedSourceChains:
        items:
          $ref: '#/definitions/entity.ChainID'
        type: array
      whitelistedTools:
        items:
          type: string
        type: array
    required:
    - account
    - amount
    - destination
    - destinationContractCall
    - threshold
    - token
    - type
    - whitelistedSourceChains
    - whitelistedTools
    type: object
  server.AggregateWithHookSolutionHandler.response:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.TokenTransferQuote'
        type: array
    required:
    - data
    type: object
  server.BalanceSweepHandler.response:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.TokenTransferQuote'
        type: array
    required:
    - data
    type: object
  server.BorrowCost:
    description: Borrow cost structure with a big.Int represented as string
    properties:
      borrowCost:
        type: string
      liquidityPool:
        type: string
      nonce:
        type: string
      signature:
        type: string
    required:
    - borrowCost
    - liquidityPool
    - nonce
    - signature
    type: object
  server.BorrowQuote.response:
    properties:
      data:
        $ref: '#/definitions/server.Quote'
    required:
    - data
    type: object
  server.ErrorResponse:
    properties:
      debug:
        type: string
      error:
        type: string
    required:
    - debug
    - error
    type: object
  server.GetFungibleTokensByChainHandler.response:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.FungibleToken'
        type: array
    required:
    - data
    type: object
  server.GetNetworksHandler.response:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.Network'
        type: array
    required:
    - data
    type: object
  server.GetSupportedFungibleTokens.response:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.FungibleToken'
        type: array
    required:
    - data
    type: object
  server.GetSupportedToolsHandler.response:
    properties:
      tools:
        items:
          type: string
        type: array
    required:
    - tools
    type: object
  server.HealthHandler.response:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  server.Quote:
    properties:
      borrowCost:
        type: string
      duration:
        type: string
      requiredInput:
        type: string
      requiredOutput:
        type: string
    required:
    - borrowCost
    - duration
    - requiredInput
    - requiredOutput
    type: object
  server.SingleHopWithHookHandler.request:
    properties:
      account:
        type: string
      amount:
        type: string
      destination:
        $ref: '#/definitions/entity.ChainID'
      destinationContractCall:
        properties:
          approvalAddress:
            type: string
          callData:
            type: string
          contractAddress:
            type: string
          gasLimit:
            type: integer
          outputTokenAddress:
            type: string
        required:
        - callData
        - contractAddress
        - gasLimit
        type: object
      enableSwaps:
        type: boolean
      recipient:
        type: string
      threshold:
        type: string
      token:
        type: string
      type:
        enum:
        - fungible
        type: string
      whitelistedSourceChains:
        items:
          $ref: '#/definitions/entity.ChainID'
        type: array
      whitelistedTools:
        items:
          type: string
        type: array
    required:
    - account
    - amount
    - destination
    - destinationContractCall
    - enableSwaps
    - recipient
    - threshold
    - token
    - type
    - whitelistedSourceChains
    - whitelistedTools
    type: object
  server.SingleHopWithHookHandler.response:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.TokenTransferQuote'
        type: array
    required:
    - data
    type: object
  server.chainBalance:
    properties:
      balance:
        description: token balance in lowest denomination
        example: "123"
        type: string
      chainId:
        type: integer
      tokenDecimals:
        type: integer
    required:
    - balance
    - chainId
    - tokenDecimals
    type: object
info:
  contact: {}
paths:
  /accounts/{account}/assets/fungible/{token}:
    get:
      consumes:
      - application/json
      description: Returns cross chain account balance in lowest denomination for
        supported fungible token
      parameters:
      - description: Either token name or token symbol (case insensitive)
        in: path
        name: token
        required: true
        type: string
      - description: Account address in hex format with 0x (case insensitive)
        in: path
        name: account
        required: true
        type: string
      - description: comma separated list of source chain ids that can be used
        in: query
        name: whitelistedChains
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.AccountFungibleBalanceHandler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns cross chain account balance for supported fungible token
  /accounts/{account}/assets/native:
    get:
      consumes:
      - application/json
      description: Returns cross chain account balance in lowest denomination for
        eth
      parameters:
      - description: Account address in hex format with 0x (case insensitive)
        in: path
        name: account
        required: true
        type: string
      - description: comma separated list of source chain ids that can be used
        in: query
        name: whitelistedChains
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.AccountFungibleBalanceHandler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns cross chain account balance for chains with eth as native token
  /assets/fungible:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.GetSupportedFungibleTokens.response'
      summary: Returns supported tokens
  /assets/fungible/{token}:
    get:
      consumes:
      - application/json
      description: Using given token name or symbol it will return fungible token
        details
      parameters:
      - description: Either token name or token symbol (case insensitive)
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FungibleToken'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns supported fungible token details
  /health:
    get:
      consumes:
      - application/json
      description: health check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.HealthHandler.response'
      summary: health check
  /liquidity/protocol/{protocol}/deposit/{txHash}/request:
    get:
      consumes:
      - application/json
      description: Get the borrow cost for a liquidity transaction
      parameters:
      - description: input data (relay data)
        in: body
        name: Input
        required: true
        schema:
          type: string
      - description: caller address (solver address)
        in: body
        name: Caller
        required: true
        schema:
          type: string
      - description: Protocol
        in: path
        name: protocol
        required: true
        type: string
      - description: Transaction hash for the deposit
        in: path
        name: txHash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.BorrowCost'
        "400":
          description: Bad request due to invalid input or missing parameters
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get the borrow cost for a liquidity transaction
      tags:
      - Liquidity
  /liquidity/protocol/{protocol}/type/{type}/quote:
    get:
      consumes:
      - application/json
      description: This endpoint calculates the borrow quote for a liquidity transaction,
        including the borrow cost, required input/output, and duration.
      parameters:
      - description: Amount to borrow
        in: body
        name: amount
        required: true
        schema:
          type: string
      - description: Token address (in Ethereum address format)
        in: body
        name: token
        required: true
        schema:
          type: string
      - description: Network ID for the transaction
        in: body
        name: network
        required: true
        schema:
          type: integer
      - description: Protocol name (e.g., Across)
        in: path
        name: protocol
        required: true
        type: string
      - description: Quote algorithm type (e.g., ExactInput, ExactOutput)
        in: path
        name: type
        required: true
        type: string
      - description: Destination Network ID (optional, defaults to the network from
          the request body)
        in: query
        name: network
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved borrow quote
          schema:
            $ref: '#/definitions/server.BorrowQuote.response'
        "400":
          description: Bad request due to invalid input or missing parameters
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get the borrow quote for a liquidity transaction based on the input
        data
      tags:
      - Liquidity
  /networks:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.GetNetworksHandler.response'
      summary: Returns all supported networks
  /networks/{chainID}/assets/fungible:
    get:
      consumes:
      - application/json
      parameters:
      - description: Chain ID
        in: path
        name: chainID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.GetFungibleTokensByChainHandler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns supported tokens on a chain defined by given chainID
  /solution/call:
    post:
      consumes:
      - application/json
      description: Endpoint will calculate best single-hop solution to execute crosschain
        call.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.SingleHopWithHookHandler.request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.SingleHopWithHookHandler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns only single hop soulution to do contract call on destination
  /solutions/aggregation:
    get:
      consumes:
      - application/json
      description: Endpoint will calculate best combination of single-hop transfers
        to
      parameters:
      - description: account address in hex format with 0x which will send and receive
          funds
        in: query
        name: account
        required: true
        type: string
      - description: id of destination chain
        in: query
        name: destination
        required: true
        type: integer
      - description: supported token name or symbol
        in: query
        name: token
        required: true
        type: string
      - description: min targeted amount of tokens on destination in lowest denomination
        in: query
        name: amount
        required: true
        type: string
      - description: min amount of tokensto leave on source in lowest denomination
        in: query
        name: threshold
        type: string
      - description: comma separated list of source chain ids that can be used
        in: query
        name: whitelistedSourceChains
        type: string
      - description: comma separated list of tools that can be used for getting quote
        in: query
        name: whitelistedTools
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.AggregateBalanceSolutionHandler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns solution to aggregate fungible token balance on destination
    post:
      consumes:
      - application/json
      description: Endpoint will calculate best combination of single-hop transfers
        to
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AggregateWithHookSolutionHandler.request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.AggregateWithHookSolutionHandler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns solution to aggregate fungible token balance on destination
        and invoking contract call
  /solutions/balance-sweep:
    get:
      consumes:
      - application/json
      description: Endpoint will return quote to transfer full token balances of source
        chains to a destination chain
      parameters:
      - description: account address in hex format with 0x which will send funds
        in: query
        name: account
        required: true
        type: string
      - description: recipient address in hex format with 0x which will receive funds
        in: query
        name: recipient
        type: string
      - description: id of destination chain
        in: query
        name: destination
        required: true
        type: integer
      - description: supported token name or symbol
        in: query
        name: token
        required: true
        type: string
      - description: comma separated list of source chain ids that can be used
        in: query
        name: whitelistedSourceChains
        type: string
      - description: comma separated list of tools that can be used for getting quote
        in: query
        name: whitelistedTools
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.BalanceSweepHandler.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns solution to sweep all token balances
  /tools:
    get:
      consumes:
      - application/json
      description: It will return the list of tools that is currently supported in
        sprinter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.GetSupportedToolsHandler.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Returns supported tools for quote service
swagger: "2.0"
